<?php

namespace {{ namespace }};

use KLP\KlpMcpServer\Services\ProgressService\ProgressNotifierInterface;
use KLP\KlpMcpServer\Services\ToolService\Annotation\ToolAnnotation;
use KLP\KlpMcpServer\Services\ToolService\Result\TextToolResult;
use KLP\KlpMcpServer\Services\ToolService\Result\ToolResultInterface;
use KLP\KlpMcpServer\Services\ToolService\Schema\PropertyType;
use KLP\KlpMcpServer\Services\ToolService\Schema\SchemaProperty;
use KLP\KlpMcpServer\Services\ToolService\Schema\StructuredSchema;
use KLP\KlpMcpServer\Services\ToolService\StreamableToolInterface;

class {{ className }} implements StreamableToolInterface
{
    /**
     * Progress notifier for streaming operations
     */
    private ?ProgressNotifierInterface $progressNotifier = null;

    /**
     * Get the tool name.
     *
     * @return string
     */
    public function getName(): string
    {
        return '{{ toolName }}';
    }

    /**
     * Get the tool description.
     *
     * @return string
     */
    public function getDescription(): string
    {
        return 'Description of {{ className }}';
    }

    /**
     * Get the input schema for the tool.
     *
     * @return StructuredSchema
     */
    public function getInputSchema(): StructuredSchema
    {
        return new StructuredSchema(
            new SchemaProperty(
                name: 'param1',
                type: PropertyType::STRING,
                description: 'First parameter description',
                enum: ['default', 'other'],
                default: 'default',
                required: true
            ),
            new SchemaProperty(
                name: 'param2',
                type: PropertyType::STRING,
                description: 'Second parameter description',
                required: true
            )
            // ...
        );
    }

    /**
     * Gets the JSON Schema definition for the tool's output.
     *
     * The output schema defines the structure and types of the data that will be
     * returned by the tool's execute() method. This helps LLM clients understand
     * and properly handle the tool's output.
     *
     * @return StructuredSchema|null The JSON Schema for the tool's output, or null if the tool
     *                               doesn't provide a structured output schema. When provided,
     *                               this schema helps with type safety and output validation.
     * @see https://modelcontextprotocol.io/specification/2025-06-18/server/tools
     */
    public function getOutputSchema(): ?StructuredSchema
    {
        return null;
    }

    /**
     * Get the tool annotations.
     *
     * @return ToolAnnotation
     */
    public function getAnnotations(): ToolAnnotation
    {
        return new ToolAnnotation(
            title: 'Title of {{ className }}'
        );
    }

    /**
     * Execute the tool.
     *
     * @param array $arguments Tool arguments
     * @return ToolResultInterface
     */
    public function execute(array $arguments): ToolResultInterface
    {
        $param1 = $arguments['param1'] ?? 'default';
        $param2 = $arguments['param2'] ?? 'something';

        // Implement your tool logic here
        return new TextToolResult("Tool executed with parameters: {$param1}, {$param2}");
    }

    /**
     * Determines if this tool should return a streaming response.
     *
     * When this method returns true, the execute() method should return
     * a callback function that will be used as the StreamedResponse callback.
     *
     * @return bool True if the tool supports streaming, false otherwise.
     */
    public function isStreaming(): bool
    {
        return false;
    }

    /**
     * Set the progress notifier for streaming operations
     *
     * @param ProgressNotifierInterface $progressNotifier The progress notifier instance
     */
    public function setProgressNotifier(ProgressNotifierInterface $progressNotifier): void
    {
        $this->progressNotifier = $progressNotifier;
    }
}
