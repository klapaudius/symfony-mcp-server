<?php

namespace {{ namespace }};

use KLP\KlpMcpServer\Services\ProgressService\ProgressNotifierInterface;
use KLP\KlpMcpServer\Services\ToolService\Annotation\ToolAnnotation;
use KLP\KlpMcpServer\Services\ToolService\Result\ToolResultInterface;
use KLP\KlpMcpServer\Services\ToolService\StreamableToolInterface;

class {{ className }} implements StreamableToolInterface
{
    /**
     * Progress notifier for streaming operations
     */
    private ?ProgressNotifier $progressNotifier = null;

    /**
     * Get the tool name.
     *
     * @return string
     */
    public function getName(): string
    {
        return '{{ toolName }}';
    }

    /**
     * Get the tool description.
     *
     * @return string
     */
    public function getDescription(): string
    {
        return 'Description of {{ className }}';
    }

    /**
     * Get the input schema for the tool.
     *
     * @return array
     */
    public function getInputSchema(): array
    {
        return [
            'type' => 'object',
            'properties' => [
                'param1' => [
                    'type' => 'string',
                    'description' => 'First parameter description',
                ],
                // Add more parameters as needed
            ],
            'required' => ['param1'],
        ];
    }

    /**
     * Get the tool annotations.
     *
     * @return ToolAnnotation
     */
    public function getAnnotations(): ToolAnnotation
    {
        return new ToolAnnotation;
    }

    /**
     * Execute the tool.
     *
     * @param array $arguments Tool arguments
     * @return ToolResultInterface
     */
    public function execute(array $arguments): ToolResultInterface
    {
        $param1 = $arguments['param1'] ?? 'default';

        // Implement your tool logic here
        return "Tool executed with parameter: {$param1}";
    }

    /**
     * Determines if this tool should return a streaming response.
     *
     * When this method returns true, the execute() method should return
     * a callback function that will be used as the StreamedResponse callback.
     *
     * @return bool True if the tool supports streaming, false otherwise.
     */
    public function isStreaming(): bool
    {
        return false;
    }

    /**
     * Set the progress notifier for streaming operations
     *
     * @param ProgressNotifier $progressNotifier The progress notifier instance
     */
    public function setProgressNotifier(ProgressNotifierInterface $progressNotifier): void
    {
        $this->progressNotifier = $progressNotifier;
    }
}
